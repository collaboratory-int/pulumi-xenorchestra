// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    [Obsolete(@"xenorchestra.index/getnetwork.getNetwork has been deprecated in favor of xenorchestra.index/getxoanetwork.getXoaNetwork")]
    public static class GetNetwork
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Xenorchestra.GetXoaNetwork.Invoke(new()
        ///     {
        ///         NameLabel = "Pool-wide network associated with eth0",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = net.Apply(getXoaNetworkResult =&gt; getXoaNetworkResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("xenorchestra:index/getNetwork:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Xenorchestra.GetXoaNetwork.Invoke(new()
        ///     {
        ///         NameLabel = "Pool-wide network associated with eth0",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = net.Apply(getXoaNetworkResult =&gt; getXoaNetworkResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("xenorchestra:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Xenorchestra.GetXoaNetwork.Invoke(new()
        ///     {
        ///         NameLabel = "Pool-wide network associated with eth0",
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = net.Apply(getXoaNetworkResult =&gt; getXoaNetworkResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("xenorchestra:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bridge network interface.
        /// </summary>
        [Input("bridge")]
        public string? Bridge { get; set; }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("nameLabel", required: true)]
        public string NameLabel { get; set; } = null!;

        /// <summary>
        /// The pool the network is associated with.
        /// </summary>
        [Input("poolId")]
        public string? PoolId { get; set; }

        public GetNetworkArgs()
        {
        }
        public static new GetNetworkArgs Empty => new GetNetworkArgs();
    }

    public sealed class GetNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bridge network interface.
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("nameLabel", required: true)]
        public Input<string> NameLabel { get; set; } = null!;

        /// <summary>
        /// The pool the network is associated with.
        /// </summary>
        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        public GetNetworkInvokeArgs()
        {
        }
        public static new GetNetworkInvokeArgs Empty => new GetNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        /// <summary>
        /// The name of the bridge network interface.
        /// </summary>
        public readonly string Bridge;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the network.
        /// </summary>
        public readonly string NameLabel;
        /// <summary>
        /// The pool the network is associated with.
        /// </summary>
        public readonly string? PoolId;

        [OutputConstructor]
        private GetNetworkResult(
            string bridge,

            string id,

            string nameLabel,

            string? poolId)
        {
            Bridge = bridge;
            Id = id;
            NameLabel = nameLabel;
            PoolId = poolId;
        }
    }
}
