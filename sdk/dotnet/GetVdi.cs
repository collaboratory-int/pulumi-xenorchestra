// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    [Obsolete(@"xenorchestra.index/getvdi.getVdi has been deprecated in favor of xenorchestra.index/getxoavdi.getXoaVdi")]
    public static class GetVdi
    {
        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Task<GetVdiResult> InvokeAsync(GetVdiArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVdiResult>("xenorchestra:index/getVdi:getVdi", args ?? new GetVdiArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetVdiResult> Invoke(GetVdiInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVdiResult>("xenorchestra:index/getVdi:getVdi", args ?? new GetVdiInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetVdiResult> Invoke(GetVdiInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVdiResult>("xenorchestra:index/getVdi:getVdi", args ?? new GetVdiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVdiArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the VDI.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the VDI to look up.
        /// </summary>
        [Input("nameLabel")]
        public string? NameLabel { get; set; }

        /// <summary>
        /// The ID of the pool the VDI belongs to. This is useful if you have a VDI with the same name on different pools.
        /// </summary>
        [Input("poolId")]
        public string? PoolId { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// The tags (labels) applied to the given entity.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetVdiArgs()
        {
        }
        public static new GetVdiArgs Empty => new GetVdiArgs();
    }

    public sealed class GetVdiInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the VDI.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the VDI to look up.
        /// </summary>
        [Input("nameLabel")]
        public Input<string>? NameLabel { get; set; }

        /// <summary>
        /// The ID of the pool the VDI belongs to. This is useful if you have a VDI with the same name on different pools.
        /// </summary>
        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags (labels) applied to the given entity.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetVdiInvokeArgs()
        {
        }
        public static new GetVdiInvokeArgs Empty => new GetVdiInvokeArgs();
    }


    [OutputType]
    public sealed class GetVdiResult
    {
        /// <summary>
        /// The ID of the VDI.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the VDI to look up.
        /// </summary>
        public readonly string? NameLabel;
        /// <summary>
        /// The ID of the parent VDI if one exists. An example of when a VDI will have a parent is when it was created from a VM fast clone.
        /// </summary>
        public readonly string Parent;
        /// <summary>
        /// The ID of the pool the VDI belongs to. This is useful if you have a VDI with the same name on different pools.
        /// </summary>
        public readonly string? PoolId;
        /// <summary>
        /// The tags (labels) applied to the given entity.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetVdiResult(
            string id,

            string? nameLabel,

            string parent,

            string? poolId,

            ImmutableArray<string> tags)
        {
            Id = id;
            NameLabel = nameLabel;
            Parent = parent;
            PoolId = poolId;
            Tags = tags;
        }
    }
}
