// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Xenorchestra
{
    [Obsolete(@"xenorchestra.index/getpif.getPif has been deprecated in favor of xenorchestra.index/getxoapif.getXoaPif")]
    public static class GetPif
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var eth0 = Xenorchestra.GetXoaPif.Invoke(new()
        ///     {
        ///         Device = "eth0",
        ///         Vlan = -1,
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = eth0.Apply(getXoaPifResult =&gt; getXoaPifResult.Network),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPifResult> InvokeAsync(GetPifArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPifResult>("xenorchestra:index/getPif:getPif", args ?? new GetPifArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var eth0 = Xenorchestra.GetXoaPif.Invoke(new()
        ///     {
        ///         Device = "eth0",
        ///         Vlan = -1,
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = eth0.Apply(getXoaPifResult =&gt; getXoaPifResult.Network),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPifResult> Invoke(GetPifInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPifResult>("xenorchestra:index/getPif:getPif", args ?? new GetPifInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Xenorchestra = Pulumi.Xenorchestra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var eth0 = Xenorchestra.GetXoaPif.Invoke(new()
        ///     {
        ///         Device = "eth0",
        ///         Vlan = -1,
        ///     });
        /// 
        ///     var demo_vm = new Xenorchestra.Vm("demo-vm", new()
        ///     {
        ///         Networks = new[]
        ///         {
        ///             new Xenorchestra.Inputs.VmNetworkArgs
        ///             {
        ///                 NetworkId = eth0.Apply(getXoaPifResult =&gt; getXoaPifResult.Network),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPifResult> Invoke(GetPifInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPifResult>("xenorchestra:index/getPif:getPif", args ?? new GetPifInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPifArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
        /// </summary>
        [Input("device", required: true)]
        public string Device { get; set; } = null!;

        /// <summary>
        /// The ID of the host that the PIF belongs to.
        /// </summary>
        [Input("hostId")]
        public string? HostId { get; set; }

        /// <summary>
        /// The VLAN the PIF belongs to.
        /// </summary>
        [Input("vlan", required: true)]
        public int Vlan { get; set; }

        public GetPifArgs()
        {
        }
        public static new GetPifArgs Empty => new GetPifArgs();
    }

    public sealed class GetPifInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
        /// </summary>
        [Input("device", required: true)]
        public Input<string> Device { get; set; } = null!;

        /// <summary>
        /// The ID of the host that the PIF belongs to.
        /// </summary>
        [Input("hostId")]
        public Input<string>? HostId { get; set; }

        /// <summary>
        /// The VLAN the PIF belongs to.
        /// </summary>
        [Input("vlan", required: true)]
        public Input<int> Vlan { get; set; } = null!;

        public GetPifInvokeArgs()
        {
        }
        public static new GetPifInvokeArgs Empty => new GetPifInvokeArgs();
    }


    [OutputType]
    public sealed class GetPifResult
    {
        /// <summary>
        /// If the PIF is attached to the network.
        /// </summary>
        public readonly bool Attached;
        /// <summary>
        /// The name of the network device. Examples include eth0, eth1, etc. See `ifconfig` for possible devices.
        /// </summary>
        public readonly string Device;
        /// <summary>
        /// The host the PIF is associated with.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The ID of the host that the PIF belongs to.
        /// </summary>
        public readonly string HostId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The network the PIF is associated with.
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// The pool the PIF is associated with.
        /// </summary>
        public readonly string PoolId;
        /// <summary>
        /// The uuid of the PIF.
        /// </summary>
        public readonly string Uuid;
        /// <summary>
        /// The VLAN the PIF belongs to.
        /// </summary>
        public readonly int Vlan;

        [OutputConstructor]
        private GetPifResult(
            bool attached,

            string device,

            string host,

            string hostId,

            string id,

            string network,

            string poolId,

            string uuid,

            int vlan)
        {
            Attached = attached;
            Device = device;
            Host = host;
            HostId = hostId;
            Id = id;
            Network = network;
            PoolId = poolId;
            Uuid = uuid;
            Vlan = vlan;
        }
    }
}
